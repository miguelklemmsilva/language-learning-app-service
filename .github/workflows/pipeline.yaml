name: Pipeline

on:
  push:
    branches:
      - 'main'
      - 'feature**'
  delete:
    branches:
      - 'feature**'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: language-learning-app
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::021891610553:role/aws-sam-cli-managed-staging-p-PipelineExecutionRole-uIsoyRxCN20o
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::021891610553:role/aws-sam-cli-managed-stagi-CloudFormationExecutionRo-5JHqv99V788Y
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-staging-pipeli-artifactsbucket-kixxajb9vq0q
  TESTING_REGION: eu-west-2

jobs:
#  build-and-package:
#    runs-on: ubuntu-latest
#    env:
#      SAM_TEMPLATE: template.yaml
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - uses: aws-actions/setup-sam@v2
#        with:
#          use-installer: true
#
#      - name: Build resources
#        run: sam build --template ${SAM_TEMPLATE}
#
#      - name: Assume the testing pipeline user role
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.TESTING_REGION }}
#          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
#          role-session-name: feature-deployment
#          role-duration-seconds: 3600
#          role-skip-session-tagging: true
#
#      - name: Upload artifacts to testing artifact buckets
#        run: |
#          sam package \
#            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
#            --region ${TESTING_REGION} \
#            --output-template-file packaged-testing.yaml
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: packaged-testing.yaml
#          path: packaged-testing.yaml
#
#  deploy-testing:
#    needs: [ build-and-package ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: aws-actions/setup-sam@v2
#        with:
#          use-installer: true
#      - uses: actions/download-artifact@v3
#        with:
#          name: packaged-testing.yaml
#
#      - name: Assume the testing pipeline user role
#        uses: aws-actions/configure-aws-credentials@v1-node16
#        with:
#          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.TESTING_REGION }}
#          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
#          role-session-name: testing-deployment
#          role-duration-seconds: 3600
#          role-skip-session-tagging: true
#
#      - name: Deploy to testing account
#        run: |
#          sam deploy --stack-name ${TESTING_STACK_NAME} \
#            --template packaged-testing.yaml \
#            --capabilities CAPABILITY_IAM \
#            --region ${TESTING_REGION} \
#            --no-fail-on-empty-changeset \
#            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
#            --no-confirm-changeset
  
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
    defaults:
      run:
        working-directory: "./terraform"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=miguelklemmsilva-tf-state-bucket" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=eu-west-2"

      - name: Terraform destroy
        if: github.event_name == 'delete'
        run: |
          terraform destroy -auto-approve

      - name: Terraform Plan
        run: |
          terraform plan

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve